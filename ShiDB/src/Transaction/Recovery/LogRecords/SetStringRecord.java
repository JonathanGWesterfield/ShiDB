package Transaction.Recovery.LogRecords;

import File.BlockId;
import File.Page;
import Log.LogMgr;
import Transaction.Transaction;

/**
 * Log Structure:
 * --LogOp, TransactionNum, filename, block number, offset, value--
 */
public class SetStringRecord implements LogRecord {
    private int txNum;
    private int offset;
    private String sVal;
    private BlockId blk;

    public SetStringRecord(Page page) {
        int transactionPosition = Byte.BYTES;
        txNum = page.getInt(transactionPosition);

        int filenamePosition = transactionPosition + Integer.BYTES;
        String filename = page.getString(filenamePosition);

        int blockPosition = filenamePosition + Page.maxLength(filename.length());
        int blockNum = page.getInt(blockPosition);
        blk = new BlockId(filename, blockNum);

        int offsetPosition = blockPosition + Integer.BYTES;
        offset = page.getInt(offsetPosition);

        int valuePosition = offsetPosition + Integer.BYTES;
        sVal = page.getString(valuePosition);
    }

    @Override
    public int getOperator() {
        return SETSTRING;
    }

    @Override
    public int getTxNumber() {
        return txNum;
    }

    @Override
    public void undo(Transaction tx) {
//        tx.pin(blk);
//        tx.setString(blk, offset, sVal, false); // don't log the undo
//        tx.unpin(blk);
    }

    /**
     * Writes a {@link SETSTRING} log record with the given information
     * @param logMgr A log manager instance to write the logs
     * @param txNum The transaction number of the SETSTRING record
     * @param blk The block of the transaction
     * @param offset The offset of the string payload
     * @param sVal The String value we want to write into the log record
     * @return The log sequence number generated by the log manager for this new record
     */
    public static int writeToLog(LogMgr logMgr, int txNum, BlockId blk, int offset, String sVal) {
        try {
            RecoveryLogRecordBuilder recordBuilder = new RecoveryLogRecordBuilder(LogRecord.SETSTRING)
                    .setTxNum(txNum)
                    .setFilename(blk.getFilename())
                    .setBlockNum(blk)
                    .setValueOffset(offset)
                    .setValue(sVal);

            Page page = recordBuilder.build();

            if (page == null)
                throw new Exception("Failed to build the log record!!!");

            // TODO: Remove this print statement once I've confirmed it works
            System.out.println("Built Record: " + recordBuilder.toString());
            return logMgr.append(page.getBytes(0));
        }
        catch (Exception e) {
            System.err.println("Couldn't write log record!!!\n" + e);
        }
        return -1; // if the log manager fails to write the log, return -1 lsn
    }

    @Override
    public String toString() {
        return String.format("<SETSTRING %d %d %d %s>", txNum, blk, offset, sVal);
    }
}
